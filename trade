#!/usr/bin/python
from trading import Market, Order, Indicator, Serie, MARKET_PRICE
from trading.strategy import Strategy, Insanity
from trading.backtest import BacktestMarket
from trading.evolver import Evolver
from util import save_as_js
from optparse import OptionParser
import settings
import datetime
import logging,  sys

log = logging.getLogger("strategy")
logging.basicConfig(level=logging.DEBUG)
log.info("STARTED")


def do_backtest(args,options):
    if len(args) < 2:
        raise Exception("Specify history file for backtest")

    market = BacktestMarket()
    market["SBER"].candle( datetime.timedelta( minutes=1 ) ).strategy( Strategy, 0, 13 )
    market.load( args[1] )
    print("Backtesting done.\nTicks: %d\nBalance: %.2f\nTrades: %d\nProfitable: %d (%.2f%%)" %
              (market.ticks, market.balance, market.trades, market.profit_trades, 100.0 * (float(market.profit_trades) / market.trades) if market.trades > 0 else 0  ))

    if len(args) > 2:
        save_as_js( market["SBER"], args[2] )

def monitor(ticker):
    print(ticker)

def do_trade(args, options):
    try:
        from quik.market import QuikMarket
    except ImportError as ex:
        raise Exception("Quik connector not available: %s" % ex)

    ticker = settings.TRADE_TICKER
    market = QuikMarket(settings.QUIK_PATH, settings.QUIK_DDE)
    candle = market[ticker].candle( datetime.timedelta( seconds=settings.TRADE_PERIOD ) )
#    candle.strategy( Strategy )
    candle.strategy( Insanity )
#    candle.ontick += monitor
#    market[ticker].ontick += monitor
    market.run()

def do_evolve(args, options):
    if len(args) < 2:
        raise Exception("Specify history file for evolve")

    ev = Evolver( args[1] )
    ev.run()
    print(ev.best)
 
def profile(func, args, options):
    import hotshot, hotshot.stats
    prof = hotshot.Profile("trade.prof")
    prof.runcall(func,args,options)
    prof.close()
    stats = hotshot.stats.load("trade.prof")
    stats.strip_dirs()
    stats.sort_stats('time', 'calls')
    stats.print_stats(50)

if __name__ == "__main__":
    parser = OptionParser("usage: %prog [options] <trade|backtest|evolve>")
    parser.add_option("-p", "--profile", action="store_true", dest="profile", default=False, help="Profile code perfomance")
    (options, args) = parser.parse_args()
    if len(args)<1:
        parser.error("incorrect number of arguments")
    fname = "do_%s" % args[0]
    if not fname in globals():
        parser.error("invalid action: %s" % args[0])

    try:
        if options.profile:
            profile( globals()[fname], args, options )
        else:
            globals()[fname]( args, options )
    except Exception as ex:
#        parser.error( str(ex) )
        raise
